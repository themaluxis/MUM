/* File: app/static/css/input.css */

@import "tailwindcss"; /* Imports Tailwind's base, components, and utilities */

@source "../../templates";

/* DaisyUI Plugin Import and Theme Configuration for Tailwind v4 */
@plugin "daisyui" {
    themes: light --default, dark --prefersdark;
    root: ":root";
    logs: true;
}

@theme {
  --color-plex: oklch(74.22% 0.18 80.28);
  --color-jellyfin: oklch(0.63 0.27 304.24);
  --color-emby: oklch(73.4% 0.19 150.17);
  --color-kavita: oklch(71.41% 0.19 53.8);
  --color-audiobookshelf: oklch(62.8% 0.16 263.78);
  --color-komga: oklch(64.9% 0.22 29.4);
  --color-romm: oklch(62.28% 0.16 282.4);
}

/* Custom base styles or overrides can go here */
body {
  @apply font-sans;
}

/* Default state (no .htmx-request on button) */
button:not(.htmx-request) > .sync-loader.htmx-indicator {
  display: none !important; /* Loader hidden */
}
button:not(.htmx-request) > .sync-icon.default-icon-state {
  display: inline-flex !important; /* Icon shown */
  align-items: center;
}

/* Loading state (button has .htmx-request) */
button.htmx-request > .sync-loader.htmx-indicator {
  display: inline-block !important; /* Loader shown */
}
button.htmx-request > .sync-icon.default-icon-state {
  display: none !important; /* Icon hidden */
}

/* The .sync-text span has no specific rules here, so it should always inherit 
   its default display (inline for a span) or be influenced by the parent button's flex properties.
   DaisyUI's .btn class usually makes children align nicely.
*/

/* --- General HTMX Indicator Rules (can be kept as fallbacks for other indicators) --- */
.htmx-indicator {
  display: none; /* Start transparent for any transition effects */
  /* display:none; /* This general rule can sometimes be too broad; let specific rules above control button children */
}
.htmx-request .htmx-indicator{
  display: inline-block;
  /* display:inline-block; /* Again, let specific rules handle display for button children */
}
.htmx-request.htmx-indicator{ /* If the element IS the indicator and has htmx-request */
  display: inline-block;
}
/* --- End General --- */

/* --- Custom Animations & Utilities --- */

/* 1. Define Keyframes (standard CSS, Tailwind will include this) */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeOutDown {
  from {
    opacity: 1;
    transform: translateY(0);
  }
  to {
    opacity: 0;
    transform: translateY(20px);
  }
}

/* 2. Create utility classes that use these animations.
      These are plain CSS classes that Tailwind will also include.
      If Tailwind v4 has a new directive for defining animation utilities directly,
      that would be preferred. For now, this is standard CSS.
*/
.animate-fadeInUp {
  animation: fadeInUp 0.3s ease-out forwards;
}

.animate-fadeOutDown {
  animation: fadeOutDown 0.3s ease-in forwards;
}

/* You can also put these inside @layer utilities if IntelliSense/Tailwind v4 prefers,
   but the direct definition should also work. The key is that Tailwind's build
   process bundles all of this.
   Example if @layer is preferred for the utilities:
*/
/*
@layer utilities {
  .animate-fadeInUp {
    animation-name: fadeInUp;
    animation-duration: 0.3s;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;
  }
  .animate-fadeOutDown {
    animation-name: fadeOutDown;
    animation-duration: 0.3s;
    animation-timing-function: ease-in;
    animation-fill-mode: forwards;
  }
}
*/


/* --- Other Custom Styles --- */

.flash-message {
  @apply p-4 mb-4 rounded-md;
}
.flash-message.success {
  @apply bg-success text-success-content;
}
.flash-message.error {
  @apply bg-error text-error-content;
}
.flash-message.info {
  @apply bg-info text-info-content;
}
.flash-message.warning {
  @apply bg-warning text-warning-content;
}

label.required::after {
  content: " *";
  @apply text-error;
}

@media print {
  body {
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
  }
  .no-print, .no-print * {
    display: none !important;
  }
  .print-only {
    display: block !important;
  }
}

@layer utilities {
  .border-primary {
    border-color: var(--color-primary);
  }
}