/* File: app/static/css/input.css */

@import "tailwindcss"; /* Imports Tailwind's base, components, and utilities */

@source "../../templates";

/* DaisyUI Plugin Import and Theme Configuration for Tailwind v4 */
@plugin "daisyui" {
    themes: light --default, dark --prefersdark;
    root: ":root";
    logs: true;
}

@theme static {
  --color-plex: oklch(74.22% 0.18 80.28);
  --color-jellyfin: oklch(0.63 0.27 304.24);
  --color-emby: oklch(73.4% 0.19 150.17);
  --color-kavita: oklch(0.74 0.13 163.11);
  --color-audiobookshelf: oklch(62.8% 0.16 263.78);
  --color-komga: oklch(64.9% 0.22 29.4);
  --color-romm: oklch(62.28% 0.16 282.4);

  /* Plex Color Palette */
  --color-plex-50: oklch(97% 0.02 80.28);
  --color-plex-100: oklch(94% 0.04 80.28);
  --color-plex-200: oklch(88% 0.08 80.28);
  --color-plex-300: oklch(82% 0.12 80.28);
  --color-plex-400: oklch(78% 0.15 80.28);
  --color-plex-500: oklch(74.22% 0.18 80.28);
  --color-plex-600: oklch(68% 0.16 80.28);
  --color-plex-700: oklch(58% 0.14 80.28);
  --color-plex-800: oklch(48% 0.12 80.28);
  --color-plex-900: oklch(38% 0.10 80.28);
  --color-plex-950: oklch(28% 0.08 80.28);

  /* Jellyfin Color Palette */
  --color-jellyfin-50: oklch(95% 0.03 304.24);
  --color-jellyfin-100: oklch(90% 0.06 304.24);
  --color-jellyfin-200: oklch(82% 0.12 304.24);
  --color-jellyfin-300: oklch(74% 0.18 304.24);
  --color-jellyfin-400: oklch(68% 0.22 304.24);
  --color-jellyfin-500: oklch(63% 0.27 304.24);
  --color-jellyfin-600: oklch(58% 0.24 304.24);
  --color-jellyfin-700: oklch(48% 0.20 304.24);
  --color-jellyfin-800: oklch(38% 0.16 304.24);
  --color-jellyfin-900: oklch(28% 0.12 304.24);
  --color-jellyfin-950: oklch(18% 0.08 304.24);

  /* Emby Color Palette */
  --color-emby-50: oklch(96% 0.02 150.17);
  --color-emby-100: oklch(92% 0.04 150.17);
  --color-emby-200: oklch(85% 0.08 150.17);
  --color-emby-300: oklch(78% 0.12 150.17);
  --color-emby-400: oklch(75% 0.16 150.17);
  --color-emby-500: oklch(73.4% 0.19 150.17);
  --color-emby-600: oklch(68% 0.17 150.17);
  --color-emby-700: oklch(58% 0.15 150.17);
  --color-emby-800: oklch(48% 0.12 150.17);
  --color-emby-900: oklch(38% 0.10 150.17);
  --color-emby-950: oklch(28% 0.08 150.17);

  /* Kavita Color Palette */
  --color-kavita-50: oklch(96% 0.01 163.11);
  --color-kavita-100: oklch(92% 0.02 163.11);
  --color-kavita-200: oklch(86% 0.04 163.11);
  --color-kavita-300: oklch(80% 0.07 163.11);
  --color-kavita-400: oklch(77% 0.10 163.11);
  --color-kavita-500: oklch(74% 0.13 163.11);
  --color-kavita-600: oklch(68% 0.12 163.11);
  --color-kavita-700: oklch(58% 0.10 163.11);
  --color-kavita-800: oklch(48% 0.08 163.11);
  --color-kavita-900: oklch(38% 0.06 163.11);
  --color-kavita-950: oklch(28% 0.04 163.11);

  /* Audiobookshelf Color Palette */
  --color-audiobookshelf-50: oklch(95% 0.02 263.78);
  --color-audiobookshelf-100: oklch(90% 0.04 263.78);
  --color-audiobookshelf-200: oklch(82% 0.08 263.78);
  --color-audiobookshelf-300: oklch(74% 0.12 263.78);
  --color-audiobookshelf-400: oklch(68% 0.14 263.78);
  --color-audiobookshelf-500: oklch(62.8% 0.16 263.78);
  --color-audiobookshelf-600: oklch(58% 0.14 263.78);
  --color-audiobookshelf-700: oklch(48% 0.12 263.78);
  --color-audiobookshelf-800: oklch(38% 0.10 263.78);
  --color-audiobookshelf-900: oklch(28% 0.08 263.78);
  --color-audiobookshelf-950: oklch(18% 0.06 263.78);

  /* Komga Color Palette */
  --color-komga-50: oklch(96% 0.02 29.4);
  --color-komga-100: oklch(92% 0.05 29.4);
  --color-komga-200: oklch(85% 0.10 29.4);
  --color-komga-300: oklch(78% 0.15 29.4);
  --color-komga-400: oklch(71% 0.18 29.4);
  --color-komga-500: oklch(64.9% 0.22 29.4);
  --color-komga-600: oklch(58% 0.20 29.4);
  --color-komga-700: oklch(48% 0.17 29.4);
  --color-komga-800: oklch(38% 0.14 29.4);
  --color-komga-900: oklch(28% 0.11 29.4);
  --color-komga-950: oklch(18% 0.08 29.4);

  /* ROMM Color Palette */
  --color-romm-50: oklch(95% 0.02 282.4);
  --color-romm-100: oklch(90% 0.04 282.4);
  --color-romm-200: oklch(82% 0.08 282.4);
  --color-romm-300: oklch(74% 0.12 282.4);
  --color-romm-400: oklch(68% 0.14 282.4);
  --color-romm-500: oklch(62.28% 0.16 282.4);
  --color-romm-600: oklch(58% 0.14 282.4);
  --color-romm-700: oklch(48% 0.12 282.4);
  --color-romm-800: oklch(38% 0.10 282.4);
  --color-romm-900: oklch(28% 0.08 282.4);
  --color-romm-950: oklch(18% 0.06 282.4);
}

@custom-variant dark (&:where([data-theme=dark], [data-theme=dark] *));

/* Custom base styles or overrides can go here */
body {
  @apply font-sans;
}

/* Default state (no .htmx-request on button) */
button:not(.htmx-request) > .sync-loader.htmx-indicator {
  display: none !important; /* Loader hidden */
}
button:not(.htmx-request) > .sync-icon.default-icon-state {
  display: inline-flex !important; /* Icon shown */
  align-items: center;
}

/* Loading state (button has .htmx-request) */
button.htmx-request > .sync-loader.htmx-indicator {
  display: inline-block !important; /* Loader shown */
}
button.htmx-request > .sync-icon.default-icon-state {
  display: none !important; /* Icon hidden */
}

/* The .sync-text span has no specific rules here, so it should always inherit 
   its default display (inline for a span) or be influenced by the parent button's flex properties.
   DaisyUI's .btn class usually makes children align nicely.
*/

/* --- General HTMX Indicator Rules (can be kept as fallbacks for other indicators) --- */
.htmx-indicator {
  display: none; /* Start transparent for any transition effects */
  /* display:none; /* This general rule can sometimes be too broad; let specific rules above control button children */
}
.htmx-request .htmx-indicator{
  display: inline-block;
  /* display:inline-block; /* Again, let specific rules handle display for button children */
}
.htmx-request.htmx-indicator{ /* If the element IS the indicator and has htmx-request */
  display: inline-block;
}
/* --- End General --- */

/* --- Custom Animations & Utilities --- */

/* 1. Define Keyframes (standard CSS, Tailwind will include this) */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeOutDown {
  from {
    opacity: 1;
    transform: translateY(0);
  }
  to {
    opacity: 0;
    transform: translateY(20px);
  }
}

/* 2. Create utility classes that use these animations.
      These are plain CSS classes that Tailwind will also include.
      If Tailwind v4 has a new directive for defining animation utilities directly,
      that would be preferred. For now, this is standard CSS.
*/
.animate-fadeInUp {
  animation: fadeInUp 0.3s ease-out forwards;
}

.animate-fadeOutDown {
  animation: fadeOutDown 0.3s ease-in forwards;
}

/* You can also put these inside @layer utilities if IntelliSense/Tailwind v4 prefers,
   but the direct definition should also work. The key is that Tailwind's build
   process bundles all of this.
   Example if @layer is preferred for the utilities:
*/
/*
@layer utilities {
  .animate-fadeInUp {
    animation-name: fadeInUp;
    animation-duration: 0.3s;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;
  }
  .animate-fadeOutDown {
    animation-name: fadeOutDown;
    animation-duration: 0.3s;
    animation-timing-function: ease-in;
    animation-fill-mode: forwards;
  }
}
*/


/* --- Other Custom Styles --- */

.flash-message {
  @apply p-4 mb-4 rounded-md;
}
.flash-message.success {
  @apply bg-success text-success-content;
}
.flash-message.error {
  @apply bg-error text-error-content;
}
.flash-message.info {
  @apply bg-info text-info-content;
}
.flash-message.warning {
  @apply bg-warning text-warning-content;
}

label.required::after {
  content: " *";
  @apply text-error;
}

@media print {
  body {
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
  }
  .no-print, .no-print * {
    display: none !important;
  }
  .print-only {
    display: block !important;
  }
}

@layer utilities {
  .border-primary {
    border-color: var(--color-primary);
  }
}